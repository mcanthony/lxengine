module lx.patterns;

function checker (vec2 uv) -> float
{
  vec2 t = abs( fract(uv) );
  ivec2 s = floor(t * 2);
  return floor(s[0] + s[1]) % 2;
}

function spot (vec2 uv) -> float
{
  //
  // Parameters
  //
  float r = .4;

  // Find the x and y distance from the center of the tile.
  //
  // (It is a signed distance, but this does not matter as the
  // length will square each component.)
  //
  vec2 s = vec2(.5,.5) - fract(uv);    
  return (lengthSqrd(s) < r * r) ? 1 : 0;
}

function stripe (vec2 uv) -> float
{
	float r = .30;

	float s = abs(.5 - fract(uv[0]));
	return (s < r) ? 1 : 0;
}

function tile (vec2 uv) -> float
{
	float r = .45;

	vec2 s = abs(vec2(.5,.5) - fract(uv));
	return (s[0] < r && s[1] < r) ? 1 : 0;
}

function diamond (vec2 uv) -> float
{
	float r = .4;
    float t = abs( vec2(.5, .5) - fract(uv) );
    
    return (t[0] + t[1] <= r) ? 1 : 0;
}


function wave (vec2 uv) -> float
{
	//
	// The wave pattern is a variation of the stripe pattern where
	// the u coordinate is shifted according to sin curve along the
	// v access.
	//
    uv = fract(uv);
	uv[0] += .15 * sin(2 * uv[1] * PI);	
	uv[0] = abs(.5 - uv[0]);
	return (uv[0] < .25) ? 1 : 0;
}

