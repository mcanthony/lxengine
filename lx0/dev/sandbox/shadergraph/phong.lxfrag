{
    name        : "phong",
    output      : "vec4",
    input       : [  
        [ "ambient",    "vec3",     [0,0,0]                         ],
        [ "diffuse",    "vec3",     [.5,.5,.5], "primaryColor"      ],
        [ "specular",   "vec3",     [1,1,1],    "primaryColor"      ],
        [ "specularEx", "float",    32,         "shininess"         ],
        [ "opacity",    "float",    1                               ],
    ],
    source : {
        glsl : 
        "
            // Since the eye is at <0,0,0>, the direction vector to the vertex and 
            // the vertex position in eye coordinates are equivalent.
            //
            vec3 N = normalize(fragNormalEc);
            vec3 V = normalize(fragVertexEc);
            vec3 R = reflect(V, N);
       
            vec3 c = ambient;                        // ambient term
    
            for (int i = 0; i < unifLightCount; ++i)
            {
                vec3 L = unifLightPosEc[i] - fragVertexEc;
                float d = length(L);
                L = normalize(L);
    
                float atten = 1 / (unifLightAtten[i].x + unifLightAtten[i].y * d  + unifLightAtten[i].x * d * d);
                vec3 lc = unifLightColor[i] * atten;
    
                c += diffuse * lc * max(dot(N,L), 0.0);                   // diffuse term
                c += lc * specular * pow(max(dot(R,L),0.0), specularEx);  // specular term
            }
               
            return vec4(c.x, c.y, c.z, opacity);    
        ",
    }
}
